name: Update GitHub Pages Content # Action 的名字

on:
  schedule:
    # 使用 cron 语法，表示每小时运行一次 (在 0 分时)
    # 你可以根据需要修改，例如每天运行一次 '0 0 * * *'
    # 注意：这里是 UTC 时间
    - cron: '0 * * * *'
  workflow_dispatch: # 允许手动触发此 workflow

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest # 使用最新的 Ubuntu 运行环境
    permissions:
      contents: write # 必须给予 workflow 修改仓库内容的权限
    steps:
      - name: Checkout Repository # 第一步：签出（下载）你的仓库代码
        uses: actions/checkout@v4 # 使用官方的 checkout action

      - name: Set up Python # 第二步：设置 Python 环境
        uses: actions/setup-python@v5
        with:
          python-version: '3.x' # 使用 Python 3.x

      # 如果你的 Python 脚本有依赖，取消下面注释并创建 requirements.txt 文件
      # - name: Install dependencies
      #   run: |
      #     python -m pip install --upgrade pip
      #     pip install -r requirements.txt

      - name: Run Python Script to Update Content # 第三步：运行你的 Python 脚本
        run: python update_page.py # 运行你的脚本文件名

      - name: Commit and Push Changes # 第四步：提交更改
        run: |
          git config --global user.name 'github-actions[bot]' # 设置提交者名字
          git config --global user.email 'github-actions[bot]@users.noreply.github.com' # 设置提交者邮箱
          # 检查是否有文件变动 (git status --porcelain)，如果有才执行 add, commit, push
          if [[ -n "$(git status --porcelain)" ]]; then
            git add index.html # 添加被修改的文件 (或者 git add .)
            git commit -m "Automated content update via GitHub Actions" # 提交信息
            git push # 推送到 GitHub
          else
            echo "No changes to commit."
          fi